# -*- coding: utf-8 -*-
"""
Created on Thu Jun  6 09:17:37 2024

@author: USER
"""

# Problem Description 

# Given an unsorted integer array, find the first missing positive integer.
# Your algorithm should run in O(n) time and use constant space.

# Problem Constraints
# 1 <= |A| <= 106
# -106 <= Ai <= 106

# Input Format
# The first argument is an integer array A.

# Output Format
# Return an integer equal to the first missing positive integer

# Example Input
# Input 1:
A = [1,2,0]
firstMissingPositive(A)
# Input 2:
A = [3,4,-1,1]
# Input 3:
A = [-8,-7,-6]

# Example Output
# Output 1:
# 3
# Output 2:
# 2
# Output 3:
# 1

# Example Explanation
# Explanation 1:
# 3 is the first positive missing integer.
# Explanation 2:
# 2 is the first positive missing integer.
# Explanation 3:
# 1 is the first positive missing integer.

# class Solution:
#     # @param A : list of integers
#     # @return an integer
#     def firstMissingPositive(self, A):
    
A = [3,3,True,3,1,2]
A = [ 417, 929, 845, 462, 675, 175, 73, 867, 14, 201, 777, 407, 80, 882, 785, 563, 209, 261, 776, 362, 730, 74, 649, 465, 353, 801, 503, 154, 998, 286, 520, 692, 68, 805, 835, 210, 819, 341, 564, 215, 984, 643, 381, 793, 726, 213, 866, 706, 97, 538, 308, 797, 883, 59, 328, 743, 694, 607, 729, 821, 32, 672, 130, 13, 76, 724, 384, 444, 884, 192, 917, 75, 551, 96, 418, 840, 235, 433, 290, 954, 549, 950, 21, 711, 781, 132, 296, 44, 439, 164, 401, 505, 923, 136, 317, 548, 787, 224, 23, 185, 6, 350, 822, 457, 489, 133, 31, 830, 386, 671, 999, 255, 222, 944, 952, 637, 523, 494, 916, 95, 734, 908, 90, 541, 470, 941, 876, 264, 880, 761, 535, 738, 128, 772, 39, 553, 656, 603, 868, 292, 117, 966, 259, 619, 836, 818, 493, 592, 380, 500, 599, 839, 268, 67, 591, 126, 773, 635, 800, 842, 536, 668, 896, 260, 664, 506, 280, 435, 618, 398, 533, 647, 373, 713, 745, 478, 129, 844, 640, 886, 972, 62, 636, 79, 600, 263, 52, 719, 665, 376, 351, 623, 276, 66, 316, 813, 663, 831, 160, 237, 567, 928, 543, 508, 638, 487, 234, 997, 307, 480, 620, 890, 216, 147, 271, 989, 872, 994, 488, 291, 331, 8, 769, 481, 924, 166, 89, 824, -4, 590, 416, 17, 814, 728, 18, 673, 662, 410, 727, 667, 631, 660, 625, 683, 33, 436, 930, 91, 141, 948, 138, 113, 253, 56, 432, 744, 302, 211, 262, 968, 945, 396, 240, 594, 684, 958, 343, 879, 155, 395, 288, 550, 482, 557, 826, 598, 795, 914, 892, 690, 964, 981, 150, 179, 515, 205, 265, 823, 799, 190, 236, 24, 498, 229, 420, 753, 936, 191, 366, 935, 434, 311, 920, 167, 817, 220, 219, 741, -2, 674, 330, 909, 162, 443, 412, 974, 294, 864, 971, 760, 225, 681, 689, 608, 931, 427, 687, 466, 894, 303, 390, 242, 339, 252, 20, 218, 499, 232, 184, 490, 4, 957, 597, 477, 354, 677, 691, 25, 580, 897, 542, 186, 359, 346, 409, 655, 979, 853, 411, 344, 358, 559, 765, 383, 484, 181, 82, 514, 582, 593, 77, 228, 921, 348, 453, 274, 449, 106, 657, 783, 782, 811, 333, 305, 784, 581, 746, 858, 249, 479, 652, 270, 429, 614, 903, 102, 378, 575, 119, 196, 12, 990, 356, 277, 169, 70, 518, 282, 676, 137, 622, 616, 357, 913, 161, 3, 589, 327 ]
A = [ 559, 191, 594, 35, 858, 554, 890, 90, 101, 371, 959, 29, 253, 248, 333, 888, 583, 500, 532, 984, 418, 755, 190, 94, 508, 16, 616, 223, 954, 569, 718, 382, 221, 72, 835, 517, 189, 84, 604, 914, 866, 199, 1000, 356, 252, 407, 654, 472, 614, 470, 80, 238, 217, 294, 802, 364, 771, 36, 859, 980, 149, 187, 246, 969, 28, 496, 530, 237, 781, 812, 731, 779, 433, 513, 973, 815, 748, 623, 625, 408, 163, 652, 884, 582, 464, 971, 185, 814, 466, 412, 592, 950, 377, 756, 81, 279, 501, 64, 570, 400, 745, 631, 542, 862, 567, 641, 489, 254, 448, 706, 606, 376, 73, 15, 272, 266, 869, 318, 741, 521, 946, 247, -5, 922, 446, 537, 385, -1, 48, 96, 988, 927, 34, 467, 526, 960, 626, 399, 130, 753, 769, 548, 545, 892, 838, 875, 987, 881, 656, 694, 474, 263, -3, 599, 678, 235, 503, 749, 825, 550, 891, 102, 805, 579, 951, 647, 729, 710, 52, 546, 961, 54, 547, 344, 156, 751, 596, 590, 427, 175, 259, 490, 59, 794, 135, 179, 561, 417, 725, 78, 461, 941, 4, 1, 705, 576, 317, 177, 133, 152, 415, 13, 553, 964, 45, 420, 161, 497, 140, 649, 416, 244, 996, 222, 872, 845, 162, 405, 455, 261, 453, 976, 761, 787, 679, 286, 450, 809, 613, 967, 260, 736, 916, 557, 76, 863, 899, 609, 410, 806, 680, 127, 879, 463, 444 ]

A.index(1)
A.index(0)
A.index(417)
A = [1]
A =  [ 1, 1, 1 ]

firstMissingPositive(A)
def firstMissingPositive(A):
    A = list(set(A))
    A.sort()    
    count = 1
    try:
        ix = A.index(1)
    except:
        return 1 
    n_A = len(A)
    for i in range(ix, n_A):
        # print(i, A, count)
        if A[i] != count:
            return count
        else:
            count += 1
    return count
    # tbs = 1
    # while True:
    #     try:
    #         A.index(tbs)
    #         tbs += 1
    #     except:
    #         return tbs
    # A = list(set(A))
    # n_A = len(A)
    # A.append(0)
    # cur_ix = 0
    # counter_ix = 0
    # while counter_ix < n_A:
    #     temp = A[cur_ix]
    #     print(counter_ix, cur_ix, A)
    #     if type(temp) != bool: 
    #         if (temp > n_A or temp < 0):
    #             print('1111')
    #             A[cur_ix] = 0
    #             counter_ix += 1
    #             cur_ix = counter_ix
    #             continue
    #     elif temp == True:
    #         print('2222')
    #         counter_ix += 1
    #         cur_ix = counter_ix
    #         continue
        
    #     # print(cur_ix, counter_ix, A)
    #     print(temp)
    #     if temp > n_A:
    #         print('here', temp, n_A)
    #         counter_ix += 1
    #         cur_ix = counter_ix
    #     else:
    #         print('there', counter_ix, A[cur_ix])                
    #         A[cur_ix] = True
    #         # print(A, cur_ix, temp)
    #         cur_ix = temp
    #         counter_ix += 1
    # count = 0
    # print(A)
    # for i in range(n_A + 1):
    #     if A[i] == True:
    #         count += 1
    #         continue
    #     else:
    #         return count
    # return count
    # # if count == 0:
    # #     return 1
    # # else:
    # #     return count
    # # return A

            
    

# Time Limit Exceeded.
# A = [ -1, 986810, 827949, 171768, 2290, 55304, 64156, 425780, 226589, 89053, 205803, 131199, 812529, 648324, 67333, 491142, 779961, 478212, 193467, 83823, 968386, 587762, 424920, 704838, 163177, 29334, 725043, 371479, 556597, 620530, 169738, 950763, 255309, 843088, 992989, 77457, 796820, 460215, 332219, 507252, 715175, 414243, 167190, 667117, 428296, 49082, 184793, 532238, 396911, 460681, 235452, 505513, 879607, 905545, 323758, 189655, 892007, 244166, 718434, 320471, 851161, 730390, 585121, 791541, 862186, 470270, 541873, 569545, 960381, 118037, 496342, 607161, 841768, 141585, 576393, 853021, 680596, 720030, 633562, 750716, 981532, 442475, 517052, 664152, 922818, 954475, 129650, 640738, 292945, 505971, 992890, 562327, 924442, 345268, 331283, 18918, 156037, 995882, 808391, 417314, 956383, 910550, 167013, 709851, 245841, 209367, 994040, 459354, 87986, 820794, 387233, 778912, 474676, 225819, 688195, 198654, 627066, 695188, 765818, 169029, 840016, 782257, 899546, 183685, 302763, 773899, 188497, 512824, 74754, 591859, 802800, 823739, 852039, 596424, 809972, 993462, 22819, 785723, 694135, 3514, 844685, 428977, 857842, 321863, 490352, 678582, 917803, 114943, 758192, 982680, 108764, 828091, 828495, 632647, 472955, 880768, 509232, 127582, 261295, 146595, 374552, 168360, 231789, 694278, 724274, 378022, 10317, 219668, 641193, 490419, 655896, 329692, 863103, 187522, 969518, 382352, 843578, 122312, 274936, 449662, 248479, 602956, 165279, 945081, 949544, 159360, 407835, 420014, 266288, 292390, 576465, 322540, 762580, 137528, 938789, 774611, 515090, 839927, 616798, 575280, 868975, 187635, 193593, 120506, 249870, 237432, 444035, 275270, 134381, 70071, 148583, 487006, 820985, 699120, 403409, 858294, 441535, 728306, 911909, 255010, 60785, 209378, 292763, 429771, 878832, 121990, 891614, 765882, 543329, 103912, 945993, 334545, 111327, 744643, 249805, 782902, 303579, 221446, 992147, 150267, 897166, 556375, 164081, 93698, 51935, 412961, 203828, 55621, 988131, 454312, 114079, 146163, 486974, 768899, 244468, 229686, 77948, 201221, 267241, 871832, 99052, 535408, 907030, 883982, 587059, 978325, 272165, 739759, 525518, 539422, 840644, 948715, 836930, 222370, 828202, 276082, 679877, 467214, 877708, 910399, 485890, 401394, 677175, 515431, 242783, 286164, 245895, 301749, 762204, 999722, 684126, 871346, 573122, 734156, 559597, 533783, 932691, 677473, 361013, 286197, 99175, 601529, 725429, 27574, 334152, 863936, 424099, 325439, 568118, 556573, 635136, 2513, 418132, 266885, 624800, 646646, 892623, 229704, 648559, 118735, 103939, 285929, 359689, 824779, 152865, 90067, 669241, 58534, 840735, 377296, 816220, 605265, 786627, 524409, 77774, 843542, 894865, 972068, 588048, 853210, 547512, 845049, 713036, 689557, 677245, 82516, 788358, 268191, 438944, 466875, 668167, 842673, 273182, 850014, 503222, 810396, 266324, 979579, 878799, 641733, 433853, 974942, 650569, 222433, 727329, 236422, 255673, 75812, 707429, 875212, 467856, 326465, 522072, 451960, 874083, 894340, 37984, 751890, 878091, 246855, 775703, 95766, 976208, 962190, 491268, 560654, 399360, 756696, 53924, 166912, 861302, 16746, 839536, 93418, 597639, 655939, 40290, 614843, 495666, 253416, 418095, 760925, 41825, 905894, 48395, 194195, 521671, 989115, 689378, 705987, 450192, 677959, 174638, 253570, 719810, 7212, 611729, 552565, 5877, 318848, 996912, 712537, 84082, 43496, 77951, 737383, 675445, 568522, 54550, 561221, 257228, 578202, 867367, 376498, 111087, 800638, 490265, 140858, 686041, 590571, 957385, 268818, 879728, 411925, 978896, 94366, 451929, 132219, 858218, 278056, 840404, 760574, 249814, 458229, 810313, 156756, 78947, 337031, 534553, 714352, 638011, 791855, 176758, 12330, 345273, 989578, 159115, 9945, 33188, 56017, 792445, 226335, 727236, 542189, 596034, 748751, 599239, 287907, 90747, 166877, 630806, 269868, 749034, 314989, 592857, 783997, 946773, 232699, 658250, 182130, 192117, 642888, 113980, 18445, 993018, 667764, 110986, 509018, 447610, 613878, 87572, 334305, 930947, 625301, 63741, 840346, 518830, 138766, 966657, 891735, 173697, 361547, 106883, 609124, 608428, 632884, 552490, 583366, 751625, 183546, 721559, 760340, 720826, 888243, 237592, 416517, 840262, 618114, 967950, 194212, 276698, 170770, 548347, 65957, 943352, 86053, 788093, 842863, 290369, 844818, 456450, 200700, 135496, 875552, 465592, 309488, 763562, 67478, 576789, 848987, 995154, 753383, 81318, 865787, 647648, 43956, 570502, 362916, 878109, 910315, 85051, 688338, 870139, 376774, 500206, 14254, 284655, 283450, 305757, 618030, 699436, 811831, 686166, 338020, 678436, 258180, 112309, 30282, 503816, 161286, 486926, 235720, 28256, 420040, 132204, 702391, 366898, 811205, 743835, 786816, 343180, 505277, 635270, 585012, 734170, 837559, 58604, 925272, 524798, 527166, 307353, 238427, 286295, 357947, 843651, 34142, 312991, 255522, 574011, 863775, 799173, 347420, 221982, 248006, 439929, 25168, 899780, 669113, 888532, 21566, 827211, 366676, 330578, 910590, 385269, 266719, 906031, 430806, 912868, 586208, 949156, 341650, 668102, 731511, 211262, 215123, 925213, 76876, 214722, 381606, 618616, 740886, 191360, 870731, 472063, 781720, 538356, 470394, 11068, 364629, 968238, 618918, 779404, 227159, 135145, 475283, 46854, 498175, 874977, 537838, 968805, 211895, 21403, 712357, 132067, 183084, 748890, 221968, 74988, 278510, 648042, 781802, 898961, 310088, 915500, 707151, 357105, 12734, 218566, 676843, 914761, 341564, 997283, 687599, 526452, 645303, 177591, 189809, 783507, 691740, 982869, 703258, 513032, 68435, 652387, 964589, 569332, 611392, 932427, 843213, 620220, 542742, 563110, 860027, 885374, 470380, 942098, 899697, 91377, 627269, 49048, 142905, 8908, 109723, 797216, 408048, 93894, 907359, 658507, 640466, 142617, 188118, 782952, 725952, 126079, 60658, 944616, 535858, 210751, 323774, 296815, 41290, 417473, 442748, 409476, 909444, 959303, 669764, 38861, 688491, 13813, 307190, 617079, 315604, 330692, 259851, 111419, 927664, 337605, 53762, 884067, 422680, 598874, 783525, 85064, 125628, 131640, 598574, 232652, 51976, 29720, 168719, 751231, 560457, 745929, 440107, 403071, 58450, 920162, 121464, 473464, 739639, 86366, 664692, 891352, 945617, 418726, 325737, 717820, 346885, 993889, 465195, 502508, 636137, 711292, 31411, 349747, 911531, 574795, 389518, 935507, 595435, 994173, 491169, 705339, 743180, 839397, 756103, 202151, 67230, 843075, 145476, 684599, 921655, 91748, 236829, 365335, 429216, 894329, 410936, 821779, 35190, 669570, 961056, 574310, 824488, 756680, 855059, 335892, 75197, 942213, 432085, 181510, 13646, 886699, 38260, 43822, 716726, 3869, 784928, 133411, 79201, 296397, 33545, 696076, 959628, 479962, 492950, 886774, 713340, 445462, 799311, 142710, 94770, 840396, 292559, 363231, 752272, 661575, 605790, 667092, 302445, 167818, 484492, 49677, 696915, 654791, 508619, 553640, 876473, 406596, 846698, 100543, 861538, 809107, 315345, 456808, 674809, 162652, 291008, 433426, 162725, 699529, 30131, 184758, 308356, 241385, 110584, 997649, 837804, 375496, 766056, 248943, 270199, 266284, 919893, 721769, 483271, 419993, 290703, 232920, 290452, 575629, 113349, 421919, 532926, 518167, 340497, 495230, 4283, 885148, 87697, 56672, 415881, 169507, 607707, 859808, 217884, 97449, 861926, 943035, 419218, 683287, 532788, 784021, 574409, 471955, 104366, 841008, 907652, 439664, 144674, 7371, 550973, 729453, 742994, 851342, 224427, 322559, 422325, 796443, 81324, 505985, 58672, 607502, 531418, 664483, 751724, 333167, 489540, 37944, 689016, 301302, 818512, 568760, 580967, 309201, 716826, 16072, 68566, 838820, 294856, 933691, 735855, 916597, 807412, 485078, 975217, 702562, 720245, 123400, 688908, 872416, 599243, 541074, 732608, 243762, 478723, 883578, 662439, 985778, 786143, 859147, 79956, 836902, 240706, 24685, 348746, 272797, 287383, 117571, 285786, 610640, 33264, 680143, 804395, 992929, 909332, 686327, 229892, 403285, 498621, 36182, 165943, 841152, 275373, 47110, 989892, 550351, 635549, 561859, 58780, 433607, 827188, 890218, 606340, 454610, 558105, 4904, 687781, 497702, 583964, 175224, 641804, 204835, 947385, 871976, 824530, 904504, 664810, 830765, 53683, 555174, 485413, 117531, 517224, 957647, 792477, 995055, 20598, 202367, 155900, 781846, 666990, 518093, 822075, 781207, 815769, 361165, 495200, 999056, 873526, 78832, 431614, 269759, 807792, 293133, 845247, 798970, 659760, 358274, 105441, 557377, 36372, 70424, 838459, 381769, 186344, 487134, 680240, 869081, 318253, 469504, 73632, 189610, 582198, 243613, 538026, 874815, 861200, 145924, 587145, 306678, 716453, 427422, 985619, 739665, 566015, 572691, 984998, 142829, 629821, 237938, 962505, 155064, 915115, 593313, 42091, 618392, 91117, 868008, 819400, 301929, 100492, 694776, 537225, 570992, 226443, 850850, 639177, 759757, 136828, 644363, 897643, 591772, 845953, 595779, 299845, 549556, 227010, 219554, 471258, 561712, 835478, 843753, 169623, 205044, 476468, 406183, 199737, 676829, 294336, 383438, 702151, 697592, 454274, 746926, 8429, 704630, 259157, 461532, 569892, 391988, 641278, 234089, 30879, 159068, 810947, 510535, 790693, 944576, 258513, 714508, 701829, 525307, 185713, 416956, 354276, 36903, 294710, 791767, 65298, 640094, 810574, 944930, 212515, 685615, 452697, 402051, 767494, 689773, 84418, 13242, 828594, 48311, 675177, 284191, 84614, 483542, 448558, 625834, 5429, 190875, 826586, 565721, 762632, 555184, 771667, 75763, 422096, 970690, 97689, 497237, 741341, 554024, 344488, 878249, 161536, 655806, 261277, 938071, 389840, 177832, 23542, 961109, 335942, 716362, 917846, 626608, 523946, 255772, 95166, 478381, 717619, 417230, 386033, 722116, 878836, 508630, 906889, 550243, 198899, 187848, 799717, 63523, 785820, 328743, 112469, 701828, 409025, 62558, 578056, 168509, 873831, 338433, 55255, 703314, 167425, 275427, 104584, 221558, 284981, 841474, 277002, 443226, 480398, 565937, 230042, 947379, 785281, 907702, 713287, 137855, 107489, 987853, 587362, 574145, 889349, 740764, 423139, 246417, 683240, 276739, 699009, 605588, 244703, 391501, 248434, 746026, 322039, 280006, 786928, 493642, 124546, 65828, 979913, 410179, 26581, 700495, 899251, 955504, 611103, 518292, 187421, 344104, 665071, 841161, 241839, 327539, 671322, 197879, 888223, 810651, 158067, 423626, 202804, 428448, 568837, 900201, 92776, 514391, 148661, 390914, 174900, 833127, 709081, 654461, 266445, 599581, 154977, 510858, 922974, 877299, 773752, 85426, 969045, 948063, 930118, 424247, 800773, 617076, 86762, 233780, 33282, 200320, 396576, 40484, 410415, 700993, 591725, 538568, 747820, 78799, 475433, 149914, 181970, 194306, 632278, 462607, 458966, 748487, 850313, 35005, 594273, 561906, 708625, 548550, 656187, 181278, 948109, 564293, 128932, 993368, 649671, 36687, 193951, 214068, 552750, 449867, 430159, 621923, 321520, 807706, 855256, 11226, 186458, 769537, 854608, 815043, 859510, 817669, 473726, 188008, 288742, 585211, 402735, 834765, 164513, 504200, 934580, 726532, 67823, 490191, 481448, 694659, 665039, 597658, 871467, 322255, 588610, 548094, 284240, 635742, 405185, 89403, 642879, 967055, 688141, 808536, 284160, 976095, 779635, 880964, 179854, 694432, 260077, 876945, 143493, 527037, 440189, 646631, 271828, 42954, 633638, 941576, 357352, 715508, 140102, 222726, 863951, 749440, 398943, 731760, 561619, 335863, 309900, 293100, 303612, 294666, 405666, 730476, 974855, 928044, 186950, 591152, 632577, 469413, 592338, 631110, 777312, 559340, 493427, 622616, 363685, 403395, 450288, 881214, 193367, 50862, 287141, 22907, 950562, 372657, 702002, 394578, 572866, 246772, 180400, 22978, 588074, 138005, 389880, 11... ]
# #     # Editoral:
# #         # Python 

# class Solution:
#     # @param A : list of integers
#     # @return an integer
#     def firstMissingPositive(self, A):
        
#         result = len(A)+1
#         arr = set(A)
#         for i in range(1,len(A)+1):
#             if i not in arr:
#                 result = i
#                 break
              
#         return result
# # Scala:
#     class Solution {
#     def firstMissingPositive(A: Array[Int]): Int  = {
#       val len = A.length
#       val buff = Array.ofDim[Int](len)
#       A.foreach(ai => if (ai > 0 && ai <= len) buff(ai - 1) = buff(ai - 1) + 1)
    
#       for {
#         i <- buff.indices
#         ai = buff(i)
#         if ai == 0
#       } return i + 1
#       len + 1
#     }
# }
    
#     # C++
#     int Solution::firstMissingPositive(vector<int> &A) {
#     int n = A.size();
#     for (int i = 0; i < n; i++) {
#         if (A[i] > 0 && A[i] <= n) {
#             int pos = A[i] - 1;
#             if (A[pos] != A[i]) {
#                 swap(A[pos], A[i]);
#                 i--;
#             }
#         }
#     }
#     for (int i = 0; i < n; i++) {
#         if (A[i] != i + 1) return (i + 1);
#     }
#     return n + 1;
# }
    
#     # GO
# /**
#  * @input A : Integer array
#  * 
#  * @Output Integer
#  */
# //Solution based on slight variation of pegionhole principle, all operations in place. Constant memory used.
# func firstMissingPositive(A []int) int {
#     //removed all zeroes from array
#     for i, el := range A {
#         if el == 0 {
#             A[i] = -1
#         }
#     }
#     l := len(A)
#     //making all the elements in the array 0 wherever possible
#     for _, el := range A {
#         for el <= l && el > 0 {
#             temp := A[el-1]
#             A[el-1] = 0
#             el = temp
#         }
#     }
#     //checking where element is not equal to 0 and returning coprresponding value
#     for i, el := range A {
#         if el != 0 {
#             return i + 1
#         }
#     }
#     //if all the elements in the array have become 0, the this is the least positive number missing
#     return l + 1
# }
