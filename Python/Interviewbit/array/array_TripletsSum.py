# -*- coding: utf-8 -*-
"""
Created on Tue Jun  4 09:11:17 2024

@author: USER
"""

# Problem Description

# Given an array of real numbers greater than zero in form of strings. Find if there exists a triplet (a,b,c) such that 1 < a+b+c < 2. Return 1 for true or 0 for false.
# O(n) solution is expected.
# Note: You can assume the numbers in strings don't overflow the primitive data type and there are no leading zeroes in numbers. Extra memory usage is allowed.

# Problem Constraints
# 1 <= |A| <= 106
# Input Format
# The first argument is an array of strings A.

# Output Format
# Return an integer, 1 for true or 0 for false.

# Example Input
A = ["0.6", "0.7", "0.8", "1.2", "0.4"]
solve(A)
# Example Output
# 1
# Example Explanation
# Given [0.6, 0.7, 0.8, 1.2, 0.4],
# You should return 1
# as
# 0.6+0.7+0.4=1.7
# 1<1.7<2

# Hence, the output is 1.


# class Solution:
#     # @param A : list of strings
#     # @return an integer
#     def solve(self, A):

def solve(A):
    n_A = len(A)
    float_A = map(float, A)
    list_f_A = list(float_A)
    list_f_A.sort()  
    # print(list_f_A)
    def sumThree(list_f_A, lt_ix, rt_ix):
        # print(lt_ix, rt_ix)        
        if lt_ix >= rt_ix - 1:
            # print('here')
            return 0
        else:
            # print('there')
            num_1 = list_f_A[lt_ix]
            num_2 = list_f_A[lt_ix+1]
            num_3 = list_f_A[rt_ix]
            movingSum = num_1 + num_2 + num_3 
            # print(movingSum)
            if movingSum > 1 and movingSum < 2:
                result = 1
                # print(result)
                return result
                # print(result)
            elif movingSum >= 2:
                return sumThree(list_f_A, lt_ix, rt_ix - 1)
            else:
                return sumThree(list_f_A, lt_ix + 1, rt_ix) 
    return sumThree(list_f_A, 0, n_A - 1)
    # return result
A2 = [ "2.673662", "2.419159", "0.573816", "2.454376", "0.403605", "2.503658", "0.806191" ]
solve(A2)

A3 = [ "0.413465", "0.387807", "0.255447", "0.513276", "0.132415", "0.415269", "0.158253", "0.275863", "0.663459", "0.443913", "0.305158", "0.582432", "0.054963", "0.147987", "0.295048", "0.216325", "0.071779", "0.350518", "0.104720", "0.174697", "0.568755", "0.028085", "0.483351", "0.544802", "0.460824", "0.320479", "0.193183", "0.504261", "0.001734", "0.195241", "0.323563", "0.415199", "0.430586", "0.579010", "0.109347", "0.563002", "0.327614", "0.267600", "0.019737", "0.324407", "0.044847", "0.324895", "0.240174", "0.099810", "0.472883", "0.382760", "0.163674", "0.544662", "0.580816", "0.268394", "0.566897", "0.482905", "0.296479", "0.383582", "0.361041", "0.090637", "0.551600", "0.401763", "0.442437", "0.553334", "0.597004", "0.099334", "0.149405", "0.360924", "0.011678", "0.258752", "0.104798", "0.186830", "0.526352", "0.124536", "0.511238", "0.418737", "0.449431", "0.598950", "0.366086", "0.255648", "0.315044", "0.529760", "0.647848", "0.229194", "0.131488", "0.548079", "0.045434", "0.275506", "0.112534", "0.254013", "0.213681", "0.511672", "0.503314", "0.656118", "0.398340", "0.433652", "0.602990", "0.395283", "0.642115", "0.614669", "0.654035", "0.080247", "0.134833", "0.361259", "0.204783", "0.493609", "0.627534", "0.501753", "0.425893", "0.326954", "0.090735", "0.588475", "0.190048", "0.586122", "0.151004", "0.169075", "0.467535", "0.043976", "0.292119", "0.427607", "0.145527", "0.505800", "0.272613", "0.648842", "0.342791", "0.518491", "0.263366", "0.279115", "0.247108", "0.238815", "0.074656", "0.082015", "0.166601", "0.057028", "0.290812", "0.218922", "0.550637", "0.251681", "0.054009", "0.157403", "0.426173", "0.658949", "0.079212", "0.463760", "0.578405", "0.077754", "0.480373", "0.226812", "0.635934", "0.105826", "0.654420", "0.114796", "0.459164", "0.107905", "0.096972", "0.135289", "0.626397", "0.207876", "0.261943", "0.054377", "0.446692", "0.336599", "0.136393", "0.460831", "0.393627", "0.274743", "0.013087", "0.125137", "0.373962", "0.581301", "0.282540", "0.133470", "0.573584", "0.209290", "0.597230", "0.332861", "0.134583", "0.410937", "0.559673", "0.103851", "0.364301", "0.394965", "0.066185", "0.156799", "0.502871", "0.163157", "0.292089", "0.310140", "0.371034", "0.554032", "0.364517", "0.665264", "0.071503", "0.348448", "0.306967", "0.312669", "0.623192", "0.167592", "0.437806", "0.330488", "0.082227", "0.567884", "0.311496", "0.503349", "0.624712", "0.089598", "0.169544", "0.092629", "0.500535", "0.576756", "0.196481", "0.045708", "0.305055", "0.262666", "0.202508", "0.655464", "0.273362", "0.342135", "0.298938", "0.491934", "0.077039", "0.510994", "0.338070", "0.148542", "0.192776", "0.645037", "0.461211", "0.663506", "0.145963", "0.079889", "0.174867", "0.228191", "0.647773", "0.486363", "0.579078", "0.605820", "0.575962", "0.081957", "0.545987", "0.257369", "0.658713", "0.590006", "0.303078", "0.297102", "0.186007", "0.353124", "0.133439", "0.306907", "0.028593", "0.432377", "0.646379", "0.105632", "0.276705", "0.317783", "0.101712", "0.317020", "0.296154", "0.410462", "0.313860", "0.289655", "0.490351", "0.488727", "0.365384", "0.471459", "0.155963", "0.277797", "0.258151", "0.065259", "0.359754", "0.137472", "0.322628", "0.199339", "0.060813", "0.473244", "0.343979", "0.094358", "0.159702", "0.477418", "0.248803", "0.035833", "0.243130", "0.228516", "0.655669", "0.367373", "0.393837", "0.090716", "0.017727", "0.537529", "0.501178", "0.179126", "0.160518", "0.324863", "0.001187", "0.525903", "0.643860", "0.157150", "0.651238", "0.082883", "0.069947", "0.344326", "0.067894", "0.240114", "0.391203", "0.128707", "0.046692", "0.068516", "0.070603", "0.053933", "0.545935", "0.166944", "0.089766", "0.636603", "0.395460", "0.592974", "0.184848", "0.636835", "0.017024", "0.202576", "0.507698", "0.365740", "0.229240", "0.001550", "0.538141", "0.230427", "0.374991", "0.362874", "0.235116", "0.359563", "0.445757", "0.152601", "0.551427", "0.513651", "0.392715", "0.275964", "0.489896", "0.286946", "0.344481", "0.408037", "0.188417", "0.071288", "0.574981", "0.125721", "0.555429", "0.151313", "0.052029", "0.073611", "0.121482", "0.583257", "0.123725", "0.629180", "0.282331", "0.352965", "0.478269", "0.153807", "0.430931", "0.186594", "0.364219", "0.513585", "0.393696", "0.143310", "0.666186", "0.278457", "0.504500", "0.392236", "0.401960", "0.327730", "0.526720", "0.593979", "0.069102", "0.048471", "0.665267", "0.491621", "0.174192", "0.401568", "0.642935", "0.073760", "0.322717", "0.097751", "0.657017", "0.446443", "0.574470", "0.272683", "0.646946", "0.386073", "0.274028", "0.411211", "0.420205", "0.638247", "0.105668", "0.147235", "0.629095", "0.105189", "0.425693", "0.466929", "0.344963", "0.008525", "0.127994", "0.052555", "0.602504", "0.044634", "0.101026", "0.448643", "0.536255", "0.122756", "0.183545", "0.360062", "0.196516", "0.506262", "0.457814", "0.186868", "0.133577", "0.213156", "0.307089", "0.113858", "0.599229", "0.581117", "0.372607", "0.352768", "0.400236", "0.478276", "0.347542", "0.362665", "0.431003", "0.106569", "0.162929", "0.623504", "0.629298", "0.138461", "0.009393", "0.565136", "0.183095", "0.110419", "0.347113", "0.566888", "0.080713", "0.530658", "0.260285", "0.277230", "0.217792", "0.565637", "0.311636", "0.351370", "0.112127", "0.618725", "0.312766", "0.558894", "0.380714", "0.532911", "0.092534", "0.114284", "0.192059", "0.440076", "0.324487", "0.623062", "0.394183", "0.487416", "0.427438", "0.356815", "0.625877", "0.436831", "0.255285", "0.656510", "0.394788", "0.602398", "0.556733", "0.475502", "0.313928", "0.664556", "0.600270", "0.379259", "0.411065", "0.245240", "0.578167", "0.523192", "0.044837", "0.224267", "0.262958", "0.425551", "0.604716", "0.355492", "0.387373", "0.130110", "0.128903", "0.045194", "0.600710", "0.523086", "0.380149", "0.361483", "0.060774", "0.339360", "0.131648", "0.316059", "0.176743", "0.526437", "0.099330", "0.581014", "0.182811", "0.260796", "0.578904", "0.116415", "0.640055", "0.323303", "0.209193", "0.551556", "0.027367", "0.254030", "0.623361", "0.290325", "0.012915", "0.408950", "0.493355", "0.247826", "0.539060", "0.469796", "0.293020", "0.320642", "0.326217", "0.006503", "0.015459", "0.234529", "0.193402", "0.661312", "0.550588", "0.217683", "0.368621", "0.649918", "0.132031", "0.551432", "0.091587", "0.558473", "0.515385", "0.064976", "0.215110", "0.057912", "0.464071", "0.090015", "0.159480", "0.268304", "0.227878", "0.019933", "0.010588", "0.054567", "0.267759", "0.397186", "0.524364", "0.560779", "0.051163", "0.031453", "0.414821", "0.580826", "0.265982", "0.455761", "0.575472", "0.664108", "0.006778", "0.124965", "0.494899", "0.138809", "0.009731", "0.586486", "0.030616", "0.372654", "0.499000", "0.093264", "0.278104", "0.143943", "0.030817", "0.437584", "0.412248", "0.258695", "0.457517", "0.270374", "0.160800", "0.058610", "0.000895", "0.532702", "0.466928", "0.566262", "0.411693", "0.062621", "0.480422", "0.525213", "0.365920", "0.236767", "0.522656", "0.372698", "0.361732", "0.198427", "0.359045", "0.219002", "0.118247", "0.237199", "0.591656", "0.464785", "0.330463", "0.203095", "0.608729", "0.208818", "0.488217", "0.354311", "0.315051", "0.126607", "0.472223", "0.475851", "0.032755", "0.320656", "0.341888", "0.347221", "0.220252", "0.601119", "0.409842", "0.548213", "0.459667", "0.109096", "0.118314", "0.315657", "0.329332", "0.480046", "0.514084", "0.021711", "0.546586", "0.479869", "0.258910", "0.471577", "0.277988", "0.436911", "0.522210", "0.220051", "0.645729", "0.191299", "0.421900", "0.141652", "0.317906", "0.227458", "0.617504", "0.350662", "0.548114", "0.140264", "0.031217", "0.615905", "0.074717", "0.288598", "0.497452", "0.534384", "0.245232", "0.615766", "0.030913", "0.574565", "0.276684", "0.392535", "0.596276", "0.156605", "0.205738", "0.036059", "0.475720", "0.331265", "0.320508", "0.178802", "0.551316", "0.147110", "0.370101", "0.154089", "0.288762", "0.535546", "0.381547", "0.239600", "0.219542", "0.110533", "0.227402", "0.098297", "0.059772", "0.302120", "0.386895", "0.557224", "0.017376", "0.632128", "0.353862", "0.562494", "0.540027", "0.478085", "0.288363", "0.317175", "0.634690", "0.341640", "0.200772", "0.291282", "0.520443", "0.521281", "0.470084", "0.252631", "0.515929", "0.021057", "0.406720", "0.138025", "0.556603", "0.635805", "0.225164", "0.623683", "0.593877", "0.452566", "0.055315", "0.653649", "0.602224", "0.442210", "0.391746", "0.467139", "0.255210", "0.593146", "0.210505", "0.642775", "0.404565", "0.346406", "0.140823", "0.220127", "0.535584", "0.341595", "0.511409", "0.389361", "0.043748", "0.162365", "0.641993", "0.407215", "0.183423", "0.229585", "0.545241", "0.587564", "0.046263", "0.617943", "0.544582", "0.640140", "0.251381", "0.447435", "0.474661", "0.034478", "0.070517", "0.199741", "0.349155", "0.325728", "0.640426", "0.559660", "0.149375", "0.378325", "0.239400", "0.290198", "0.598453", "0.108319", "0.479332", "0.290734", "0.345218", "0.370618", "0.453100", "0.320545", "0.111168", "0.484061", "0.397669", "0.503947", "0.404959", "0.443932", "0.302762", "0.130413", "0.417406", "0.554143", "0.425386", "0.072939", "0.588621", "0.495904", "0.120219", "0.271110", "0.002504", "0.093979", "0.011642", "0.151879", "0.472304", "0.251043", "0.289616", "0.251629", "0.206900", "0.616486", "0.542364", "0.552118", "0.167976", "0.328798", "0.053536", "0.126682", "0.146193", "0.298743", "0.630629", "0.398690", "0.076009", "0.266725", "0.376642", "0.340953", "0.001741", "0.649566", "0.413892", "0.590362", "0.478804", "0.534111", "0.042345", "0.328846", "0.475628", "0.053987", "0.480726", "0.281267", "0.152568", "0.617880", "0.532896", "0.359468", "0.415238", "0.408594", "0.092459", "0.583214", "0.584930", "0.145995", "0.043231", "0.578661", "0.444738", "0.521398", "0.158224", "0.368285", "0.635662", "0.382404", "0.556776", "0.637403", "0.365304", "0.151540", "0.408637", "0.177443", "0.018986", "0.298520", "0.506289", "0.494614", "0.200046", "0.167887", "0.623419", "0.352614", "0.633305", "0.337188", "0.559621", "0.381877", "0.593320", "0.652080", "0.145964", "0.511585", "0.645613", "0.189195", "0.271118", "0.271223", "0.558131", "0.429342", "0.487046", "0.374665", "0.659284", "0.377156", "0.345402", "0.357923", "0.528696", "0.601578", "0.382904", "0.395220", "0.080970", "0.070065", "0.070707", "0.281016", "0.237953", "0.027460", "0.481169", "0.052130", "0.212186", "0.374124", "0.434008", "0.138841", "0.207076", "0.427510", "0.497964", "0.186023", "0.616705", "0.616620", "0.304784", "0.355708", "0.379297", "0.125164", "0.063708", "0.219453", "0.349858", "0.256648", "0.577376", "0.211888", "0.039098", "0.293614", "0.607109", "0.120069", "0.363680", "0.525354", "0.248623", "0.449171", "0.400352", "0.063126", "0.348839", "0.612539", "0.284788", "0.116181", "0.598918", "0.491864", "0.391229", "0.277754", "0.525425", "0.341268", "0.227708", "0.163543", "0.544515", "0.454543", "0.136245", "0.608223", "0.007331", "0.486103", "0.045743", "0.584707", "0.545530", "0.084842", "0.059194", "0.333511", "0.052449", "0.270412", "0.192199", "0.301072", "0.052917", "0.592551", "0.211737", "0.401756", "0.538424", "0.496525", "0.365476", "0.318214", "0.169262", "0.604243", "0.595968", "0.028021", "0.126384", "0.157011", "0.039103", "0.004233", "0.459092", "0.022886", "0.459994", "0.466423", "0.356528", "0.505737", "0.232003", "0.235392", "0.590579", "0.291197", "0.568903", "0.643028", "0.561609", "0.094436", "0.124973", "0.462064", "0.020321", "0.336710", "0.044692", "0.406284", "0.014107", "0.257706", "0.057832", "0.183369", "0.195284", "0.501339", "0.058929", "0.321668", "0.505888", "0.098032", "0.325901", "0.298314", "0.635122", "0.633433", "0.098072", "0.324984", "0.472504", "0.330075", "0.560376", "0.243956", "0.468810", "0.462613", "0.067856", "0.363753", "0.404587", "0.040367", "0.006689", "0.424909", "0.377077", "0.051381", "0.012065", "0.391185", "0.156626", "0.584101", "0.422092", "0.351910", "0.418774", "0.481021", "0.521116", "0.257996", "0.426591", "0.027889", "0.403849", "0.395048", "0.661322", "0.501921", "0.567570", "0.314698", "0.012868", "0.461281", "0.558654", "0.481678", "0.104766", "0.474049", "0.026303", "0.509354", "0.514416", "0.032992", "0.115135", "0.072366", "0.084373", "0.641404", "0.311089", "0.088537", "0.558839", "0.066515", "0.440447", "0.158486", "0.547537", "0.142435", "0.264020", "0.155000", "0.170324", "0.001203", "0.397586", "0.012518", "0.350662", "0.298491", "0.327217", "0.363530", "0.093106", "0.066743", "0.026080", "0.045410", "0.388330", "0.052383", "0.402302", "0.236081", "0.085375", "0.517437", "0.155985", "0.017287", "0.339713", "0.467074", "0.105824", "0.079425", "0.533589", "0.393810", "0.237911", "0.261998", "0.536245", "0.349469", "0.264537", "0.554108", "0.350673", "0.662123", "0.566626", "0.548873", "0.293948", "0.074715", "0.093276", "0.234592", "0.141459", "0.119356", "0.280003", "0.529789", "0.171740", "0.015639", "0.613408", "0.104653", "0.380615", "0.102727", "0.636144", "0.567866", "0.417339", "0.075303", "0.647291", "0.131801", "0.316651", "0.218536", "0.241337", "0.033768", "0.568006", "0.505874", "0.587876", "0.099551", "0.501332", "0.335375", "0.648424", "0.642818", "0.410090", "0.589238", "0.210745", "0.399087", "0.041929", "0.338286", "0.109749", "0.061207", "0.201463", "0.056491", "0.013398", "0.429616", "..." ]
# RuntimeError: maximum recursion depth exceeded in cmp

#     # Editoral:
# # Python:
#     class Solution:
#     # @param A : list of strings
#     # @return an integer
#     def solve(self, A):
#         n = len(A)
#         B = [float(i) for i in A]
#         buckets = [[], [], []]
#         for i in B:
#             if i < 2.0/3:
#                 buckets[0].append(i)
#             elif i < 1:
#                 buckets[1].append(i)
#             else:
#                 buckets[2].append(i)
        
#         def get(index):
#             amx1, amx2, amx3 = -10, -10, -10
#             ami1, ami2, ami3 = 3, 3, 3
#             for i in buckets[index]:
#                 if i > amx1:
#                     amx1, amx2, amx3 = i, amx1, amx2
#                 elif i > amx2:
#                     amx2, amx3 = i, amx2
#                 elif i > amx3:
#                     amx3 = i
            
#                 if i < ami1:
#                     ami1, ami2, ami3 = i, ami1, ami2
#                 elif i < ami2:
#                     ami2, ami3 = i, ami2
#                 elif i < ami3:
#                     ami3 = i
#             return [amx1, amx2, amx3, ami1, ami2, ami3]
        
        
#         a = get(0)
#         b = get(1)
#         c = get(2)
#         ls = []
#         fc = a[0] + a[1] + a[2]
#         ls.append(fc)
#         fc = a[3] + a[4] + c[3]
#         ls.append(fc)
#         fc = a[3] + b[3] + b[4]
#         ls.append(fc)
#         fc = a[3] + b[3] + c[3]
#         ls.append(fc)
#         fc = b[0] + a[3] + a[4]
#         ls.append(fc)
#         if a[0] != a[3]:
#             fc = b[0] + a[0] + a[3]
#             ls.append(fc)
#             fc = b[3] + a[0] + a[3]
#             ls.append(fc)
#         fc = b[3] + a[0] + a[1]
#         ls.append(fc)
#         for fc in ls:
#             if fc > 1 and fc < 2:
#                 return 1
#         return 0
    
#     C++
#     double min_element(vector<double> A) { // return minimum element
#     double min = A[0];
#     for (int i = 0; i < A.size(); i++) {
#         if (A[i] < min) {
#             min = A[i];
#         }
#     }
#     return min;
# }
# int Solution::solve(vector<string> &a) {
#     vector<double> A, B, C;

#     for (int i = 0; i < a.size(); i++) {
#         char b[20];
#         for (int j = 0; j < a[i].length(); j++) {
#             b[j] = a[i][j];
#         }
#         if (0.0 < atof(b) &&
#             atof(b) < ((double)2.0 / (double)3.0)) // atof converts string to double
#         {
#             A.push_back(atof(b));

#         } else if ((double)2.0 / (double)3.0 <= atof(b) && atof(b) <= 1.0) {
#             B.push_back(atof(b));

#         } else if (1.0 < atof(b) && atof(b) < 2.0) {
#             C.push_back(atof(b));
#         }
#     }

#     // 1
#     int res = 0;

#     if (A.size() >= 3) {
#         priority_queue<double> q(
#             A.begin(),
#             A.end()); // priority queue used to get max 3 elements in O(logn) time
#         double m = 0;
#         for (int i = 0; i <= 2; i++) {
#             m += q.top();
#             q.pop();
#         }

#         if (m > 1.0) {
#             res = 1;
#             return res;
#         }
#     }
#     // 2
#     if (A.size() >= 2 && B.size() >= 1) {
#         priority_queue<double> q1(
#             A.begin(),
#             A.end()); // priority queue used to get max 2 elements in O(logn) time

#         double m1 = 0;
#         for (int i = 0; i <= 1; i++) {
#             m1 += q1.top();
#             q1.pop();
#         }

#         for (int i = 0; i < B.size(); i++) {
#             if (1 - m1 < B[i] && B[i] < 2 - m1) {
#                 res = 1;
#                 return res;
#             }
#         }
#     }

#     // 3
#     if (A.size() >= 2 && C.size() >= 1) {
#         priority_queue<double, std::vector<double>, std::greater<double>> q2(
#             A.begin(),
#             A.end()); // priority queue used to get min 2 elements in O(logn) time
#         double m2 = 0;
#         for (int i = 0; i <= 1; i++) {
#             m2 += q2.top();
#             q2.pop();
#         }

#         double min = min_element(C);

#         if (m2 + min < 2.0) {
#             res = 1;
#             return res;
#         }
#     }

#     // 4
#     if (B.size() >= 2 && A.size() >= 1) {
#         priority_queue<double, std::vector<double>, std::greater<double>> q3(
#             B.begin(),
#             B.end()); // priority queue used to get min 2 elements in O(logn) time

#         double m3 = 0;
#         for (int i = 0; i <= 1; i++) {
#             m3 += q3.top();
#             q3.pop();
#         }

#         for (int i = 0; i < A.size(); i++) {
#             if (A[i] < 2 - m3) {
#                 res = 1;
#                 return res;
#             }
#         }
#     }

#     // 5
#     if (A.size() >= 1 && B.size() >= 1 && C.size() >= 1) {
#         int res3 = 0;
#         double min1 = min_element(A);
#         double min2 = min_element(B);
#         double min3 = min_element(C);
#         if (min1 + min2 + min3 < 2 && min1 + min2 + min3 > 1) {
#             res = 1;
#             return res;
#         }
#     }

#     return res;
#     // Time complexity =O(logn)+O(n)
#     // hence,Time complexity=O(n)
# }
            
#     Scala:
        
#         class Solution {
#     def solve(A: Array[String]): Int  = {
#         val arr = A.map(_.toFloat).sorted
        
#         def rec(left: Int, right: Int): Int = {
#             if (left >= right - 1) 0
#             else {
#                 val al0 = arr(left)
#                 val al1 = arr(left + 1)
#                 val rl0 = arr(right)
#                 val ss = al0 + al1 + rl0
#                 if (ss >= 2) rec(left, right - 1)
#                 else if (ss <= 1) rec(left + 1, right)
#                 else 1
#             }
#         }
        
#         rec(0, arr.length - 1)
#     }
# }