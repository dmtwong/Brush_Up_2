# -*- coding: utf-8 -*-
"""
Created on Tue Jun  4 11:51:50 2024

@author: USER
"""

# Problem Description
# Given an one-dimensional unsorted array A containing N integers.
# You are also given an integer B, find if there exists a pair of elements in the array whose difference is B.
# Return 1 if any such pair exists else return 0.

# Problem Constraints
# 1 <= N <= 105
# -103 <= A[i] <= 103
# -105 <= B <= 105

# Input Format
# First argument is an integer array A of size N.
# Second argument is an integer B.

# Output Format
# Return 1 if any such pair exists else return 0.

# Example Input
# Input 1:

  A = [5, 10, 3, 2, 50, 80]
  B = 78
  solve(A,B)
# Input 2:

  A = [-10, 20]
  B = 30

# Example Output
# Output 1:
#  1

#  1

# Example Explanation
# Explanation 1:
#  Pair (80, 2) gives a difference of 78.
# Explanation 2:
#  Pair (20, -10) gives a difference of 30 i.e 20 - (-10) => 20 + 10 => 30

# class Solution:
#     # @param A : list of integers
#     # @param B : integer
#     # @return an integer
#     def solve(self, A, B):
def solve(A, B):
    import bisect 
    n_A = len(A)
    abs_B = abs(B)
    sort_A = []    
    for i in range(n_A):
        bisect.insort(sort_A, A[i])
        # A.pop(i)
    # print(sort_A)
    last_A = sort_A[n_A - 1]
    for i in range(n_A - 1):
        cur_i = sort_A[i]
        lw_bound = sort_A[i+1] - cur_i
        up_bound = last_A - cur_i
        print(i, lw_bound, up_bound)
        if abs_B < lw_bound or abs_B > up_bound:
            print('skip')
            continue
        for j in range(n_A - 1, i, -1):
            temp = sort_A[j] - cur_i
            if temp == abs_B:
                return 1
            if temp < abs_B:
                ix_A = j
    return 0
A =  [ 478, 358, -38, -536, 705 ]
B = 320

A = [ -259, -825, 459, 825, 221, 870, 626, 934, 205, 783, 850, 398 ]
B = -42
# A : [ -959, -533, -666, -500, 169, 724, 478, 358, -38, -536, 705, -855, 281, -173, 961, -509, -5, 942, -173, 436, -609, -396, 902, -847, -708, -618, 421, -284, 718, 895, 447, 726, -229, 538, 869, 912, 667, -701, 35, 894, -297, 811, 322, -667, 673, -336, 141, 711, -747, -132, 547, 644, -338, -243, -963, -141, -277, 741, 529, -222, -684, 35, -810, 842, -712, -894, 40, -58, 264, -352, 446, 805, 890, -271, -630, 350, 6, 101, -607, 548, 629, -377, -916, 954, -244, 840, -34, 376, 931, -692, -56, -561, -374, 323, 537, 538, -882, -918, -71, -459, -167, 115, -361, 658, -296, 930, 977, -694, 673, -614, 21, -255, -76, 72, -730, 829, -223, 573, 97, -488, 986, 290, 161, -364, -645, -233, 655, 574, -969, -948, 350, 150, -59, 724, 966, 430, 107, -809, -993, 337, 457, -713, 753, -617, -55, -91, -791, 758, -779, -412, -578, -54, 506, 30, -587, 168, -100, -409, -238, 655, 410, -641, 624, -463, 548, -517, 595, -959, 602, -650, -709, -164, 374, 20, -404, -979, 348, 199, 668, -516, -719, -266, -947, 999, -582, 938, -100, 788, -873, -533, 728, -107, -352, -517, 807, -579, -690, -383, -187, 514, -691, 616, -65, 451, -400, 249, -481, 556, -202, -697, -776, 8, 844, -391, -11, -298, 195, -515, 93, -657, -477, 587, 314, 503, 448, 200, 458, -382, -420, 796, -202, 281, 589, -202, -991, 157, -528, 622, -462, -708, -962, -821, -810, 657, 958, -809, 815, -112, 156, 511, -798, -366, -728, -945, -672, -354, -638, -114, -125, -567, 869, -858, 844, 416, 881, 998, -678, -349, -979, 699, 557, -524, 892, -611, 75, -288, -400, -490, 3, -131, 861, -312, 401, 789, 255, -577, 2, -415, -818, -715, 88, 426, -383, 757, 832, -68, -831, -846, 721, 189, 976, 329, -632, -308, 425, -445, 434, -451, 441, 512, -855, -940, 718, 753, -861, -577, -721, 996, -313, -471, -451, 437, 866, -51, -807, 195, 297, -584, -714, -895, -512, -718, -545, 734, -886, 701, 316, -329, 786, -737, -687, -645, 185, -947, -88, -192, 832, -55, -687, 756, -679, 558, 646, 982, -519, -856, 196, -778, 129, -839, 535, -550, 173, -534, -956, 659, -708, -561, 253, -976, -846, 510, -255, -351, 186, -687, -526, -978, -832, -982, -213, 905, 958, 391, -798, 625, -523, -586, 314, 824, 334, 874, -628, -841, 833, -930, 487, -703, 518, -823, 773, -730, 763, -332, 192, 985, 102, -520, 213, 627, -198, -901, -473, -375, 543, 924, 23, 972, 61, -819, 3, 432, 505, 593, -275, 31, -508, -858, 222, 286, 64, 900, 187, -640, -587, -26, -730, 170, -765, -167, 711, 760, -104, -333, 285, -450, -860, 694, -305, 624, -981, -875, -424, 694, -342, -698, 371, -534, -322, -407, 851, 484, 18, -536, 119, 152, -200, -913, 60, 926, 10, -243, -830, -685, 576, -773, -957, -242, 164, 109, 882, 86, 565, 487, 577, -526, -375, 627, 629, 928, 423, -480, -98, -38, -877, -404, 737, 261, -805, -475, 264, -740, -798, -884, 30, -674, 11, -229, -589, 547, 153, 520, 790, -76, -812, 763, -60, -149, -338, 829, -100, 713, -42, 578, -635, 7, 477, 200, -942, -561, -697, -240, 357, -676, -523, 108, 113, -113, 801, -150, -540, -572, -7, 384, 405, -460, 111, -296, -165, -644, -928, 350, -177, -515, -444, 216, 626, 357, -474, 357, 337, 271, 869, 361, -104, 22, 617, -888, -283, -304, 585, -959, -577, -871, -771, -435, -441, -68, -704, 855, -947, -38, 584, 734, -346, -28, 457, -631, -468, -37, -393, -517, -89, 635, -933, -152, -325, -62, -777, -858, 754, -489, -259, -825, 459, 825, 221, 870, 626, 934, 205, 783, 850, 398, -721, -299, -807, -266, 637, -466, 556, 993, -824, 705, -38, -452, 881, -700, -587, -359, 855, -145, 142, 462, 611, -123, -576, -322, 752, -557, -704, -327, -960, 313, -125, -928, -182, -390, 17, -68, -888, -305, 169, 831, -960, -512, -315, 90, 497, -411, 990, 145, 353, 314, -349, -260, -956, 258, -665, -241, 192, 605, 264, -819, -497, 829, 775, -392, 292, 997, 549, 556, 561, 627, -533, 541, -871, 240, 813, 174, -399, -923, -785, -317, -787, 992, 824, 601, 392, 759, -330, -572, -973, -916, -925, -214, 498, -30, -713, 847, -396, -497, 221, -337, 706, -637, 10, -829, 489, -760, -836, 542, 619, -87, 591, -296, 818, 232, -250, 205, -25, 539, -697, 422, 98, 247, 584, 648, -29, 864, -87, 75, 545, -288, 546, -322, 769, 262, -481, 985, -711, 944, -135, -460, 245, 508, -682, 870, 601, -677, 132, -528, 152, 87, -430, 763, 901, 103, -577, 527, 600, -31, -985, 565, -972, 543, 347, -912, -57, -363, -591, -537, 49, -319, 588, 342, -392, -940, 221, 758, 954, -112, -854, -310, 949, -157, 430, 620, -252, 67, -464, -217, -965, -774, 185, 38, 853, 629, 224, 748, 923, 359, -743, -234, -56, -45, 318, -274, 411, 25, -645, 1, -451, 496, -416, 515, 964, 342, -925, 913, -858, 196, 948, 72, -574, -394, -827, -571, -596, -295, -374, 812, 375, -907, -435, -964, -264, 141, -186, 994, -744, -348, 936, -162, -518, 355, 15, 131, -770, 841, -375, -989, -363, -814, 690, 650, 662, 634, -107, -647, 416, 452, -992, 262, -767, 454, -697, -366, -697, -744, -852, 124, -683, -787, 109, -972, 200, 80, 318, -142, -950, -845, 361, 264, 903, 676, 643, -91, -98, 561, -511, -52, 282, 653, -326, -780, 402, -77, 831, 369, 878, -741, 8, -381, 971, -997, 945, 781, -496, -608, -315, 313, -302, 589, -278, 938, 37, -590, 461, -766, -492, 961, 959, -507, 515, 269, -63, -131, -942, -300, 971, -736, 117, -785, -445, 815, -670, 39, -788, 288, -918, 954, -915, -290, -516, -226, -620, 815, 951, -459, -885, 679, 110, 898, 73, -212, 977, -868, 956, -311, -887, -992, -59, 790, 723, 363, -972, 184, -222, 200, 71, 885, 974, 71, 333, -133, -847, -705, -832, -175, 676, 629, -350, -402, 309, -307, -314, -920, -884, -751, -333, 528, -321, 864, 421, -595, -174, -184, 516, 726, -334, 87, 681, 964, 340, 686, -979, 662, -279, -936, 309, -585, 902, 873, 124, 941, -255, 762, -577, 531, -194, -732, 318, 602, 907, -693, 481, 12, 136, -370, -886, -191, -916, 556, -710, 293, 996, 152, 54, 345, -292, -752, 491, 712, 131, -886, -561, 958, -278, 704, -5, 52, 269, 479, -762, -577, 918, -134, 659, -502, -514, 196, 462, -367, -842, -978, 146, -608, 37, 925, -353, 458, -398, -193, -902, 830, 292, -400, 278, -201, -648, -552, 882, -460, -685, -425, -238, 567, -664, -603, 418, 897, 828, 851, -184, -770, -551, -75, -342, -771, -480, -60, 560, 147, 162, 655, -325, -208, -639, 754, -602, 146, -286, -54, 188, 569, -362, 663, 75, -485, 521, -525, 615, -472, 234, -430, -95, 464, 557, -38, -839, -476, -451, 469, -670, 923, -650, -667, -75, -90, 737, -664, -663, 278, -607, 636, -286, -836, 591, 949, 135, -495, 337, -996, -663, -377, -336, 970, 608, -432, 281, 85, 152, -627, -348, -806, 876, 826, -604, 572, -751, -360, 174, -181, -57, -389, 941, -711, -581, 565, 805, 585, -784, 450, 615, -391, 64, 166, -107, -926, 509, -700, 695, 573, 589, 161, 172, 968, 358, -969, -732, 426, -490, -578, -226, -221, -90, 552, -818, 391, 495, 764, -126, 364, -98, -745, -540, -526, -28, -179, -878, 547, 577, 789, 605, -805, 594, 950, -657, -246, -519, 12, 672, 439, 428, 912, 762, 967, -592, -585, 908, 223, 759, -566, 204, 486, -681, -42, 945, -194, -834, -300, 367, 692, 787, -468, -444, -26, 447, 21, -717, -778, 331, -624, -417, -52, -277, 982, -982, -224, 220, 111, -818, 856, 490, -75, -676, -514, 677, 969, 643, 534, 677, -332, 68, 991, -804, 783, -172, 727, 426, 871, -303, 612, -297, 27, 408, 545, 508, 185, -762, -763, -557, 313, -499, -150, 128, -889, 650, -851, 192, 454, 869, -319, 465, -733, 713, 793, -366, 472, -28, -170, -99, -558, 177, 877, 770, -298, -636, 381, -410, -177, -763, -977, -821, -405, -831, -673, -958, 310, -818, 58, 926, 487, 670, -472, 651, -742, 213, 860, 783, 286, -258, -390, -528, 128, -566, 841, -282, 503, -133, -135, -62, 881, 257, -250, -386, -402, -542, -339, -937, -244, -193, -722, 489, 435, -635, -925, 586, 386, 833, -640, 330, -952, -72, 492, -567, 840, -234, 735, 810, 599, 837, 892, 982, 328, 352, 369, 244, 794, -392, 252, 647, 432, 535, 208, 264, 497, 243, 649, -985, -159, -811, -900, 812, -352, 523, 851, -526, -367, 891, 200, 854, 990, 697, -81, 780, -422, -69, -456, 340, 487, -101, -475, -517, 538, 492, -807, -748, 11, 560, 834, 840, 497, -215, -471, 540, -195, -209, 392, 210, 549, 578, -21, -29, 277, -927, -807, 620, 497, 826, 276, 790, -418, 578, 159, -582, -511, -841, 449, -76, 72, -620, 8, 967, -792, -523, -497, 370, -393, -804, -926, 722, -389, 19, -239, 56, -110, 163, -317, 716, 932, 452, -259, -46, -187, -138, -604, 460, -385, -96, -401, -864, -320, 198, 32, -613, -416, 240, 517, 6, -330, -759, -118, 249, 523, 758, -895, 621, 95, 296, 916, 678, -822, 579, 58, 577, -250, -993, 729, -919, -5, -322, -324, 753, -101, 784, 565, 93, 608, -828, 243, 929, 514, -832, 55, 191, 973, -78, -252, 651, -14, -856, -554, 577, -483, -371, 916, 874, 791, 469, -88, -854, -307, 91, 815, -51, -143, -360, -948, -764, -449, 487, 226, -838, -45, 183, -606, -820, -903, 65, 65, -487, 261, -422, 78, -122, -860, -389, 947, -555, -830, 975, 489, -250, -851, 333, 865, -786, 282, 7, 432, -104, -633, -478, -118, 810, 641, 231, -813, -295, -521, -679, -462, 351, 447, -792, 646, -724, 759, -811, -578, 666, -514, 455, -972, 614, -140, 253, 777, 348, -497, -139, -569, 82, -545, -803, -894, -248, 821, 296, -719, -979, -545, 947, 124, -682, 135, 376, 774, 859, -2, -926, 253, -78, -365, 643, -112, -847, 232, -253, -320, 926, 678, -550, -199, -39, -801, -145, -637, 716, -427, 561, 245, -527, -726, 550, -647, 181, -713, -301, -890, -357, 465, 172, -471, 981, -888, 476, -619, -753, -110, -329, -195, -628, -968, 989, 320, 165, 431, 658, 293, 206, -422, -52, -794, 171, -834, 396, -303, 20, 694, 529, -212, -891, 984, 969, -22, 617, -985, -374, 684, 168, 906, 928, -903, -882, -610, 199, 785, -514, 199, -580, -290, -729, 813, 415, -915, -682, 580, 331, 267, -613, 444, 186, -493, -640, 827, -926, -569, 152, -729, -732, -307, 885, -663, 311, 604, -323, -594, 768, 22, 413, 0, -458, 537, -962, 388, 355, 289, 647, 181, 93, -416, -13, -239, -507, -783, 501, 482, 447, 665, -247, -896, 84, 95, 525, -779, 964, 781, -128, -894, 656, 343, -407, 80, -920, -132, 411, 713, -32, 251, 216, -921, -232, 40, 531, -67, 779, -337, -741, -347, 936, -905, -635, 874, 720, -165, 680, -24, -545, 725, -929, -192, 559, 156, 602, 832, 905, -560, 375, 562, -115, 962, 80, 836, -203, 202, -492, -920, 340, -924, 58, 493, 740, -454, -526, -227, 97, -120, 335, 72, 400, -293, -45, -334, -859, 588, -519, 168, -685, 396, -775, 9, -988, -864, 455, -238, 43, -258, -979, 922, -488, 248, -982, 368, 717, 714, 650, 290, 335, -241, 169, 895, 303, -360, 979, -801, 105, -209, -339, -319, 652, -247, -967, -971, 987, 42, -747, -917, 420, 814, -282, -756, 63, 229, -348, -136, -231, -530, 5, 47, 594, 487, -674, 276, 323, -460, 679, 990, -412, -290, 271, 945, 221, -530, -817, 589, 955, -22, -221, 6, 262, -865, 487, 196, 33, -912, -65, 779, 993, -210, -38, -35, 1, 105, 807, -433, -331, 134, -329, 457, -2, 545, 597, -782, -162, -156, 372, -437, 28, 264, -199, -277, 490, 604, 601, -773, 197, 692, 771, -637, 301, -637, 721, 565, 421, 445, -390, -505, -259, 22, 812, 151, 15, -945, 393, -262, 279, 882, 608, -346, 822, -293, -755, 338, -856, -710, 339, 154, -396, -377, -775, -922, 724, 981, -670, 733, -777, -406, 130, -154, -13, 445, -195, -384, 750, -511, 338, 963, -865, -303, -791, 630, 224, 908, -263, -526, 920, 372, -707, 855, -266, 561, 56, 606, -816, 75, -618, -881, -259, -568, -316, -221, -721, -717, -333, -164, -875, -882, -263, -972, -881, -423, -263, -909, -444, -205, -940, 901, -207, 432, -864, -420, -125, 907, 184, -926, -281, -210, -524, -959, 351, -671, -710, -26, 72, 591, -811, 787, 490, 239, -107, 53, 63, -319, 903, 5, -824, -521, 695, -861, -532, 998, 83, 639, 515, 621, 993, 826, 722, 838, -172, -419, -601, -22, 891, 23, -57, -166, -757, 349, -298, -293, -498, 141, -313, -654, 891, -363, -587, 400, -184, 690, 162, -65, 126, 410, 877, 382, -740, 189, -295, 874, -337, -278, -805, -434, -640, -962, -412, 811, -755, 467, -575, -133, 189, -458, 63, 547, -498, 617, 99, 23, 226, 203, -952, 51, 570, -364, 458, 967, -544, 405, 531, 962, -181, 975, -444, 531, 495, -956, -409, -197, 388, -85, 450, -681, -728, 791, 383, -867, 775, -358, 569, -700, 954, -922, 585, -743, 333, -107, -510, -897, -250, 233, -278, -729, 611, -10, -662, 641, 258, 47, -648, 658, -521, 302, -317, -10, -998, 568, -578, -105, -865, -992, -639, -258, -806, 699, 188, -822, -958, 357, 941, 847, 469, -655, -620, 913, -36, 710, -939, 385, -927, 504, 462, -297, -898, 69, 154, 529, 552, -926, 149, 730, -756, -156, 49, -882, -935, -637, 552, -227, -530, 7... ]

# #     # Editoral:
# #         # Python 
# class Solution:
#     # @param A : list of integers
#     # @param B : integer
#     # @return an integer
#     def solve(self, A, B):
#         temp=dict()
#         for a in A:
#             try:
#                 temp[a]=temp[a]+1
#             except KeyError:
#                 temp[a]=1
#         for a in A:
#             if((B+a)==a and temp[a]>1):
#                 return 1
#             elif(B+a==a):
#                 continue
#             elif(temp.get(B+a,0)!=0):
#                 return 1
#         return 0
# Scala:
# class Solution {
#     def solve(A: Array[Int], B: Int): Int  = {
    
#         import scala.collection.mutable
#         import scala.collection.mutable.HashMap
#         val arr = A.sorted
#         val diff = B
#         val map = new mutable.HashMap[Int, Boolean]()
#         var status = false
    
#         for(num <- arr) {
    
#           if(map.contains(num)) {
#             status = true
#           } else {
#             map.put(diff + num, true)
#             map.put(num - diff, true)
#           }
#         }
#         if(status) 1 else 0
#     }
# }
# C++
# bool findPair(vector<int>&arr, int size, int n)  
# {  
#     // Initialize positions of two elements  
#     int i = 0;  
#     int j = 1;  
#    sort(arr.begin(),arr.end());
#     // Search for a pair  
#     while (i < size && j < size)  
#     {  
#         if (i != j && arr[j] - arr[i] == n)  
#         {
#             return true;  
#         }  
#         else if (arr[j]-arr[i] < n)  
#             j++;  
#         else
#             i++;  
#     }  
#     return false;  
# }  
# int Solution::solve(vector<int> &A, int B) {
#     return findPair(A,A.size(),B);
# }

# GO:
#     /**
#  * @input A : Integer array
#  * @input B : Integer
#  * 
#  * @Output Integer
#  */
# func solve(A []int , B int )  (int) {
#     m := make(map[int][]int)
#     for i,a:=range A{
#         m[a] = append(m[a],i)
#     }
#     for i:=0;i<len(A);i++{
#         k := B + A[i]
#         if _,ok:=m[k];ok{
#             val := m[k]
#             for j:=0;j<len(val);j++{
#                 if val[j] != i{
#                     return 1
#                 }
#             }
#         }
#     }
#     return 0
# }
